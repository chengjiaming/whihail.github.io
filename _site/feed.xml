<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>whihail</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 07 Dec 2016 15:26:13 +0800</pubDate>
    <lastBuildDate>Wed, 07 Dec 2016 15:26:13 +0800</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>HTTP 各版本之间的差异</title>
        <description>
</description>
        <pubDate>Sun, 27 Sep 2015 19:23:32 +0800</pubDate>
        <link>http://localhost:4000/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/2015/09/27/HTTP%E5%8D%8F%E8%AE%AE%E5%90%84%E7%89%88%E6%9C%AC%E5%8C%BA%E5%88%AB.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/2015/09/27/HTTP%E5%8D%8F%E8%AE%AE%E5%90%84%E7%89%88%E6%9C%AC%E5%8C%BA%E5%88%AB.html</guid>
        
        
        <category>计算机网络</category>
        
      </item>
    
      <item>
        <title>浅谈TCP协议</title>
        <description>&lt;p&gt;TCP（Transmission Control Protocol 传输控制协议）是一种面向连接的、可靠的、基于字节流的传输层通信协议，由IETF的RFC 793定义。在简化的计算机网络 OSI 模型中，它完成第四层传输层所指定的功能，用户数据报协议（UDP）是同一层内另一个重要的传输协议。在因特网协议族（Internet protocol suite）中，TCP 层是位于 IP 层之上，应用层之下的中间层。&lt;/p&gt;

&lt;h3 id=&quot;功能&quot;&gt;&lt;strong&gt;功能&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;当应用层向TCP层发送用于网间传输的、用8位字节表示的数据流，TCP则把数据流分割成适当长度的报文段，最大传输段大小（MSS）通常受该计算机连接的网络的数据链路层的最大传送单元（MTU）限制。之后TCP把数据包传给IP层，由它来通过网络将包传送给接收端实体的TCP层。
TCP为了保证报文传输的可靠，就给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。然后接收端实体对已成功收到的字节发回一个相应的确认(ACK)；如果发送端实体在合理的往返时延(RTT)内未收到确认，那么对应的数据（假设丢失了）将会被重传。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在数据正确性与合法性上，TCP用一个校验和函数来检验数据是否有错误，在发送和接收时都要计算校验和；同时可以使用md5认证对数据进行加密。&lt;/li&gt;
  &lt;li&gt;在保证可靠性上，采用超时重传和捎带确认机制。&lt;/li&gt;
  &lt;li&gt;在流量控制上，采用滑动窗口协议，协议中规定，对于窗口内未经确认的分组需要重传。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在拥塞控制上，采用广受好评的TCP拥塞控制算法（也称AIMD算法）。该算法主要包括三个主要部分：1）加性增、乘性减；2）慢启动；3）对超时事件做出反应。&lt;/p&gt;

&lt;h3 id=&quot;连接建立&quot;&gt;&lt;strong&gt;连接建立&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;TCP是因特网中的传输层协议，使用三次握手协议建立连接。当主动方发出SYN连接请求后，等待对方回答SYN+ACK，并最终对对方的 SYN 执行 ACK确认。这种建立连接的方法可以防止产生错误的连接，TCP使用的流量控制协议是可变大小的滑动窗口协议。
TCP三次握手的过程如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;客户端发送SYN（SEQ=x）报文给服务器端，进入SYN_SEND状态。&lt;/li&gt;
  &lt;li&gt;服务器端收到SYN报文，回应一个SYN （SEQ=y）ACK(ACK=x+1）报文，进入SYN_RECV状态。&lt;/li&gt;
  &lt;li&gt;客户端收到服务器端的SYN报文，回应一个ACK(ACK=y+1）报文，进入Established状态。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;三次握手完成，TCP客户端和服务器端成功地建立连接，可以开始传输数据了。&lt;/p&gt;

&lt;h3 id=&quot;连接终止&quot;&gt;&lt;strong&gt;连接终止&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;建立一个连接需要三次握手，而终止一个连接要经过四次握手，这是由TCP的半关闭（half-close）造成的。
(1) 某个应用进程首先调用close，称该端执行“主动关闭”（active close）。该端的TCP于是发送一个FIN分节，表示数据发送完毕。
(2) 接收到这个FIN的对端执行 “被动关闭”（passive close），这个FIN由TCP确认。
(3) 一段时间后，接收到这个文件结束符的应用进程将调用close关闭它的套接字。这导致它的TCP也发送一个FIN。
(4) 接收这个最终FIN的原发送端TCP（即执行主动关闭的那一端）确认这个FIN。&lt;/p&gt;

&lt;h3 id=&quot;可靠性&quot;&gt;&lt;strong&gt;可靠性&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;TCP提供一种面向连接的、可靠的字节流服务。面向连接意味着两个使用TCP的应用（通常是一个客户和一个服务器）在彼此交换数据包之前必须先建立一个TCP连接。这一过程与打电话很相似，先拨号振铃，等待对方摘机说“喂”，然后才说明是谁。在一个TCP连接中，仅有两方进行彼此通信。广播和多播不能用于TCP。
TCP通过下列方式来提供可靠性：&lt;/p&gt;

&lt;p&gt;1．应用数据被分割成TCP认为最适合发送的数据块。这和UDP完全不同，应用程序产生的数据长度将保持不变。由TCP传递给IP的信息单位称为报文段或段（segment）。&lt;/p&gt;

&lt;p&gt;2．当TCP发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段。当TCP收到发自TCP连接另一端的数据，它将发送一个确认。TCP有延迟确认的功能，在此功能没有打开，则是立即确认。功能打开，则由定时器触发确认时间点。&lt;/p&gt;

&lt;p&gt;3．TCP将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到段的检验和有差错，TCP将丢弃这个报文段和不确认收到此报文段（希望发端超时并重发）。&lt;/p&gt;

&lt;p&gt;4．既然TCP报文段作为IP数据报来传输，而IP数据报的到达可能会失序，因此TCP报文段的到达也可能会失序。如果必要，TCP将对收到的数据进行重新排序，将收到的数据以正确的顺序交给应用层。&lt;/p&gt;

&lt;p&gt;5．既然IP数据报会发生重复，TCP的接收端必须丢弃重复的数据。&lt;/p&gt;

&lt;p&gt;6．TCP还能提供流量控制。TCP连接的每一方都有固定大小的缓冲空间。TCP的接收端只允许另一端发送接收端缓冲区所能接纳的数据。这将防止较快主机致使较慢主机的缓冲区溢出。&lt;/p&gt;

&lt;p&gt;两个应用程序通过TCP连接交换8bit字节构成的字节流。TCP不在字节流中插入记录标识符。我们将这称为字节流服务（bytestreamservice）。如果一方的应用程序先传10字节，又传20字节，再传50字节，连接的另一方将无法了解发方每次发送了多少字节。只要自己的接收缓存没有塞满，TCP 接收方将有多少就收多少。一端将字节流放到TCP连接上，同样的字节流将出现在TCP连接的另一端。
另外，TCP对字节流的内容不作任何解释。TCP不知道传输的数据字节流是二进制数据，还是ASCⅡ字符、EBCDIC字符或者其他类型数据。对字节流的解释由TCP连接双方的应用层解释。
这种对字节流的处理方式与Unix操作系统对文件的处理方式很相似。Unix的内核对一个应用读或写的内容不作任何解释，而是交给应用程序处理。对Unix的内核来说，它无法区分一个二进制文件与一个文本文件。&lt;/p&gt;

&lt;h3 id=&quot;重传策略&quot;&gt;&lt;strong&gt;重传策略&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;TCP协议用于控制数据段是否需要重传的依据是设立重发定时器。在发送一个数据段的同时启动一个重传，如果在重传超时前收到确认(Acknowlegement)就关闭该重传，如果重传超时前没有收到确认，则重传该数据段。在选择重发时间的过程中，TCP必须具有自适应性。它需要根据互联网当时的通信情况，给出合适的重发时间。&lt;/p&gt;

&lt;p&gt;这种重传策略的关键是对定时器初值的设定。采用较多的算法是Jacobson于1988年提出的一种不断调整超时时间间隔的动态算法。其工作原理是：对每条连接TCP都保持一个变量RTT（Round Trip Time），用于存放当前到目的端往返所需要时间最接近的估计值。当发送一个数据段时，同时启动连接的定时器，如果在定时器超时前确认到达，则记录所需要的时间（M），并修正RTT的值，如果定时器超时前没有收到确认，则将RTT的值增加1倍。通过测量一系列的RTT（往返时间）值，TCP协议可以估算数据包重发前需要等待的时间。在估计该连接所需的当前延迟时通常利用一些统计学的原理和算法（如Karn算法），从而得到TCP重发之前需要等待的时间值。&lt;/p&gt;

&lt;h3 id=&quot;窗口确认&quot;&gt;&lt;strong&gt;窗口确认&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;TCP的一项功能就是确保每个数据段都能到达目的地。位于目的主机的TCP服务对接受到的数据进行确认，并向源应用程序发送确认信息。
使用数据报头序列号以及确认号来确认已收到包含在数据段的相关的数据字节。
TCP在发回源设备的数据段中使用确认号，指示接收设备期待接收的下一字节。这个过程称为期待确认。
源主机在收到确认消息之前可以传输的数据的大小称为窗口大小。用于管理丢失数据和流量控制。这些变化如右图所示。&lt;/p&gt;

&lt;h3 id=&quot;拥塞控制&quot;&gt;&lt;strong&gt;拥塞控制&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&quot;出现拥塞的两种情况&quot;&gt;&lt;strong&gt;出现拥塞的两种情况：&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;快网络小缓存接收者&lt;/li&gt;
  &lt;li&gt;慢网络大缓存接收者&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;导致网络拥塞的两个潜在因素&quot;&gt;&lt;strong&gt;导致网络拥塞的两个潜在因素：&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;网络能力&lt;/li&gt;
  &lt;li&gt;接收能力&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;tcp处理第一种拥塞的措施快网络小缓存&quot;&gt;&lt;strong&gt;TCP处理第一种拥塞的措施（快网络小缓存）&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;在连接建立时声明最大可接受段长度&lt;/li&gt;
  &lt;li&gt;利用可变滑动窗口协议防止出现拥塞&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;tcp处理第二种拥塞的措施慢网络大缓存&quot;&gt;&lt;strong&gt;TCP处理第二种拥塞的措施（慢网络大缓存）&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;发送方维护两个窗口，接收方和拥塞窗口，发送方窗口按两个窗口的最小值发送&lt;/li&gt;
  &lt;li&gt;拥塞窗口依照慢启动（slow start）算法和拥塞避免（congestion avoidance）算法变化&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;慢启动slow-start算法&quot;&gt;&lt;strong&gt;慢启动（slow start）算法&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;连接建立时拥塞窗口（cwnd）初始值为该连接的最大段长（TCP最大段长），不超过64K。
发出一个最大段长的TCP段，若正确确认，拥塞窗口变为两个最大段长。
发出（拥塞窗口/最大段长）个最大长度的TCP段，若都得到确认，则拥塞窗口加倍。
重复上一步，直至发送丢包超时事件，或拥塞窗口大于阈值。&lt;/p&gt;

&lt;h4 id=&quot;拥塞避免congestion-avoidance算法&quot;&gt;&lt;strong&gt;拥塞避免（congestion avoidance）算法&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;若拥塞窗口大于阈值，从此时开始，拥塞窗口线性增长，一个RTT周期增加一个最大段长，直至发生丢包超时事件。
当超时事件发生后，阈值设置为当前拥塞窗口大小的一半，拥塞窗口重新设置为一个最大段长。
执行慢启动算法。&lt;/p&gt;

</description>
        <pubDate>Fri, 11 Sep 2015 19:23:32 +0800</pubDate>
        <link>http://localhost:4000/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/2015/09/11/%E6%B5%85%E8%B0%88TCP%E5%8D%8F%E8%AE%AE.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/2015/09/11/%E6%B5%85%E8%B0%88TCP%E5%8D%8F%E8%AE%AE.html</guid>
        
        
        <category>计算机网络</category>
        
      </item>
    
      <item>
        <title>计算机网络安全体系概述</title>
        <description>&lt;p&gt;在现代社会，互联网已经渗透到人们日常生活的方方面面，娱乐、经济、社会关系等都离不开互联网的帮助。在这个背景下，互联网安全就显得十分重要，没有提供足够的安全保障，人们是不会如此依赖它的。幸运的是，网络设计者们在设计网络之初就已经设计了一套安全体系来保障互联网信息的传递。下面我们一起来了解一下这套体系。&lt;/p&gt;

&lt;h3 id=&quot;计算机网络安全的定义&quot;&gt;&lt;strong&gt;计算机网络安全的定义&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;国际标准化组织 ISO 对计算机网络安全（Network Security）的定义：为数据处理系统建立和采用的安全防范技术，以保护计算机硬件、软件和数据不因偶然和恶意的原因遭到破坏、更改和泄露。&lt;/p&gt;

&lt;h3 id=&quot;网络安全威胁主要表现在&quot;&gt;&lt;strong&gt;网络安全威胁主要表现在：&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;非授权访问&lt;/li&gt;
  &lt;li&gt;信息泄露或丢失&lt;/li&gt;
  &lt;li&gt;破坏数据完整性&lt;/li&gt;
  &lt;li&gt;拒绝服务攻击DoS&lt;/li&gt;
  &lt;li&gt;利用网络传播病毒等。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;加密算法&quot;&gt;&lt;strong&gt;加密算法&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;对于网络安全，加密是一个重要措施，所有首先我们需要了解一下加密相关的知识，加密可以分为&lt;strong&gt;对称加密&lt;/strong&gt;和&lt;strong&gt;非对称加密&lt;/strong&gt;。两者的主要区别就是加解密是否使用同一个秘钥，对称加密加解密使用同一个秘钥。非对称加密加解密而是需要两个秘钥：&lt;strong&gt;公开密钥（publickey）&lt;/strong&gt;和 &lt;strong&gt;私有密钥（privatekey）&lt;/strong&gt;，并且加密密钥和解密密钥是成对出现的。&lt;/p&gt;

&lt;h3 id=&quot;对称加密&quot;&gt;&lt;strong&gt;对称加密&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;对称加密算法的特点是算法公开、计算量小、加密速度快、加密效率高。对称加密有很多种算法，由于它效率很高，所以被广泛使用在很多加密协议的核心当中。不足之处是，交易双方都使用同样钥匙，在网络传输过程中安全性得不到保证。常见的对称加密有 DES、AES 等。&lt;/p&gt;

&lt;h3 id=&quot;非对称加密&quot;&gt;&lt;strong&gt;非对称加密&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;非对称加解密使用一对“私钥-公钥”，用私钥加密的内容只有对应公钥才能解开，反之亦然。非对称加密有以下特性：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;对于一个公钥，有且只有一个对应的私钥。&lt;/li&gt;
  &lt;li&gt;公钥是公开的，并且不能通过公钥反推出私钥。&lt;/li&gt;
  &lt;li&gt;通过私钥加密的密文只能通过公钥能解密，通过公钥加密的密文也只能通过私钥能解密。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;非对称加密不需要共享同一份秘钥，安全性要比对称加密高，但由于算法强度比对称加密复杂，加解密的速度比对称加解密的速度要慢。在实际应用中，常使用非对称加密对 &lt;strong&gt;明文（plianttext）&lt;/strong&gt; 的 &lt;strong&gt;摘要&lt;/strong&gt; 进行加密以减少加解密复杂度。常见的非对称加密有 RSA、ESA、ECC 等。&lt;/p&gt;

&lt;h3 id=&quot;摘要算法&quot;&gt;&lt;strong&gt;摘要算法&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;除了加密算法，摘要算法在互联网安全体系中也扮演了重要的角色。摘要算法有以下特性：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;只要源文不同，计算得到的结果，必然不同（或者说概率很小）。&lt;/li&gt;
  &lt;li&gt;无法从结果反推出源数据。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;基于以上特性，我们一般使用摘要算法来校验原始内容是否被篡改。常见的摘要算法有 MD5、SHA 等。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tips: 摘要算法不能算作加密算法，加密算法需要使用秘钥加解密，但摘要算法无法根据结果反推出内容。但是如 MD5 等摘要目前也不算安全了，例如 &lt;a href=&quot;https://zh.wikipedia.org/wiki/彩虹表&quot;&gt;彩虹表攻击&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;具体例子&quot;&gt;&lt;strong&gt;具体例子&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;假设甲公司要给乙公司发送一份机密的文件，那么这次传输需要确保以下几点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;文件内容不能被读取（加密）&lt;/li&gt;
  &lt;li&gt;文件内容不能被篡改（数字签名）&lt;/li&gt;
  &lt;li&gt;文件不能被掉包（数字证书）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面我们分别对上述概念分别进行说明。&lt;/p&gt;

&lt;h3 id=&quot;加密&quot;&gt;&lt;strong&gt;加密&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;对称加密使用同一份秘钥，这一份秘钥的约定就有被中途截获的可能。因此可以采用非对称加密算法加密对称秘钥的方式来加密内容，也就是用乙的公钥加密对称秘钥，并用这个对称秘钥加密文件内容。&lt;/p&gt;

&lt;p&gt;假设这份文件被黑客截获，但是黑客没有乙的私钥无法解出对称秘钥，也就无法解密文件内容。但是这里有个风险，虽然黑客无法解密文件内容，但他可以自己生成一份秘钥并用乙的公钥加密，再用这份秘钥加密一份伪造的文件发给乙，这种情况下乙收到的就是被篡改的文件。&lt;/p&gt;

&lt;h3 id=&quot;数字签名&quot;&gt;&lt;strong&gt;数字签名&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;上面提到乙有可能收到被篡改的文件，这个问题可以用数字签名的方式解决，数字签名就是用摘要算法提取出源文件的摘要并用私钥进行加密后的内容。针对上面那个问题，甲在发送文件时再附带上源文件的数字签名。如果被黑客截取到加密后的文件和数字签名，黑客即使使用甲的公钥解出了文件摘要，由于摘要算法的特性黑客也无法还原出原始内容。但乙可以解密出文件内容再用同样的摘要算法提取出摘要来和数字签名里的摘要进行比对，摘要一致则说明文件没有被篡改过。&lt;/p&gt;

&lt;p&gt;到目前为止还有一个风险就是乙无法确定自己用的公钥就是甲提供的，如果黑客将乙手里的甲的公钥替换成自己的并用自己的私钥生成数字签名，那么乙还是会受到被篡改的文件。&lt;/p&gt;

&lt;h3 id=&quot;数字证书&quot;&gt;&lt;strong&gt;数字证书&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;数字证书的出现就是为了解决上述提到的问题，数字证书是一个经证书授权中心数字签名的包含公开密钥拥有者信息以及公开密钥的文件。&lt;/p&gt;

&lt;p&gt;数字证书里一般会包含公钥、公钥拥有者名称、CA 的数字签名、有效期、授权中心名称、证书序列号等信息。&lt;/p&gt;

&lt;p&gt;数字证书如何确保列出的用户就是公钥的拥有者呢？关键点是 CA 的数字签名，CA会用自己的私钥将 &lt;strong&gt;证书内容&lt;/strong&gt; 的摘要进行加密。因为 CA 的公钥是公开的，任何人都可以用公钥解密出 CA 的数字签名的摘要，再用同样的摘要算法提取出证书的摘要和解密 CA 数字签名后的摘要比对，一致则说明这个证书没有被篡改过，可以信任。
加密
对称加密需要用同一份秘钥，这一份秘钥的约定就有被中途截获的可能。因此可以采用非对称加密算法加密对称秘钥的方式来加密内容，也就是用乙的公钥加密对称秘钥，并用这个对称秘钥加密文件内容。&lt;/p&gt;

&lt;p&gt;假设这份文件被黑客截获，但是黑客没有乙的私钥无法解出对称秘钥，也就无法解密文件内容。但是这里有个风险，虽然黑客无法解密文件内容，但他可以自己生成一份秘钥并用乙的公钥加密，再用这份秘钥加密一份伪造的文件发给乙，这种情况下乙收到的就是被篡改的文件。&lt;/p&gt;

&lt;h3 id=&quot;数字签名-1&quot;&gt;&lt;strong&gt;数字签名&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;上面提到乙有可能收到被篡改的文件，这个问题可以用数字签名的方式解决，数字签名就是用摘要算法提取出源文件的摘要并用私钥进行加密后的内容。针对上面那个问题，甲在发送文件时再附带上源文件的数字签名。如果被黑客截取到加密后的文件和数字签名，黑客即使使用甲的公钥解出了文件摘要，由于摘要算法的特性黑客也无法还原出原始内容。但乙可以解密出文件内容再用同样的摘要算法提取出摘要来和数字签名里的摘要进行比对，摘要一致则说明文件没有被篡改过。&lt;/p&gt;

&lt;p&gt;到目前为止还有一个风险就是乙无法确定自己用的公钥就是甲提供的，如果黑客将乙手里的甲的公钥替换成自己的并用自己的私钥生成数字签名，那么乙还是会受到被篡改的文件。&lt;/p&gt;

&lt;h3 id=&quot;数字证书-1&quot;&gt;&lt;strong&gt;数字证书&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;数字证书的出现就是为了解决上述提到的问题，数字证书是一个经证书授权中心数字签名的包含公开密钥拥有者信息以及公开密钥的文件。&lt;/p&gt;

&lt;p&gt;数字证书里一般会包含公钥、公钥拥有者名称、CA 的数字签名、有效期、授权中心名称、证书序列号等信息。&lt;/p&gt;

&lt;p&gt;数字证书如何确保列出的用户就是公钥的拥有者呢？关键点是 CA 的数字签名，CA会用自己的私钥将证书内容的摘要进行加密。因为 CA 的公钥是公开的，任何人都可以用公钥解密出 CA 的数字签名的摘要，再用同样的摘要算法提取出证书的摘要和解密 CA 数字签名后的摘要比对，一致则说明这个证书没有被篡改过，可以信任。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/numberBook.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;pki&quot;&gt;&lt;strong&gt;PKI&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;PKI（Public Key Infrastructure）翻译过来就是公钥基础设施，可以理解为利用公钥技术为网络应用提供加密和数字签名等密码服务以及必需的密钥和证书管理体系。它是一个提供安全服务的基础设施，PKI 技术是信息安全技术的核心，同时也是电子商务的关键和基础技术。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;PKI 既不是一个协议，也不是一个软件，它是一个标准，在这个标准之下发展出的为了实现安全基础服务目的的技术统称为 PKI。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;PKI是一个标准，它包括一些基本的组件，不同的组件提供不同的服务，主要由一下几个组件组成：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;认证中心 CA（证书签发）：CA 机构，又称为证书授证 (Certificate Authority) 中心，是 PKI 的”核心”，即数字证书的申请及签发机关，CA 必须具备权威性的特征，它负责管理 PKI 结构下的所有用户(包括各种应用程序)的证书，把用户的公钥和用户的其他信息捆绑在一起，在网上验证用户的身份，CA 还要负责用户证书的黑名单登记和黑名单发布。&lt;/li&gt;
  &lt;li&gt;X.500目录服务器（证书保存）：X.500目录服务器用于”发布”用户的证书和黑名单信息，用户可通过标准的 LDAP 协议查询自己或其他人的证书和下载黑名单信息。&lt;/li&gt;
  &lt;li&gt;具有高强度密码算法（SSL）的安全 WWW 服务器(即配置了 HTTPS 的 apache)：Secure socket layer（SSL）协议最初由 Netscape 企业发展，现已成为网络用来鉴别网站和网页浏览者身份，以及在浏览器使用者及网页服务器之间进行加密通讯的全球化标准。&lt;/li&gt;
  &lt;li&gt;Web（安全通信平台）：Web 有 Web Client 端和 Web Server 端两部分，分别安装在客户端和服务器端，通过具有高强度密码算法的 SSL 协议保证客户端和服务器端数据的机密性、完整性、身份验证。&lt;/li&gt;
  &lt;li&gt;自开发安全应用系统：自开发安全应用系统是指各行业自开发的各种具体应用系统，例如银行、证券的应用系统等。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;总结&quot;&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;数字签名&lt;/strong&gt; 和 &lt;strong&gt;数字证书&lt;/strong&gt; 是两个不同的概念，理解的关键点是数字签名是内容提供方用自己的私钥对内容摘要（MD5、SHA）非对称加密，而数字证书的关键是 CA 用自己的私钥对证书内容的摘要非对称加密从而确保证书内的用户合法拥有证书里列出的公钥。&lt;/p&gt;
</description>
        <pubDate>Sun, 09 Aug 2015 19:23:32 +0800</pubDate>
        <link>http://localhost:4000/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/2015/08/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%BD%93%E7%B3%BB%E6%A6%82%E8%BF%B0.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/2015/08/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%BD%93%E7%B3%BB%E6%A6%82%E8%BF%B0.html</guid>
        
        
        <category>计算机网络</category>
        
      </item>
    
  </channel>
</rss>
